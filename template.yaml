AWSTemplateFormatVersion: 2010-09-09
Description: >-
            Someone is squatting on your domain name! Or are they?
            We'll never know... unless we check. And that's why ***great squat*** is here.
            Give us a domain name, and we'll check to see what squatters might be out there.
Transform:
  - AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:

  # S3 Bucket to host single page app website
  WebSiteBucket:
    Type: AWS::S3::Bucket

  WebSiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebSiteBucket
      PolicyDocument:
        Version: "2012-10-17"
        Id: PolicyForCloudFrontPrivateContent
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Join ["", ["arn:aws:s3:::", !Ref WebSiteBucket, /*]]
            Condition:
              StringEquals:
                AWS:SourceArn:
                  !Join [
                    "",
                    [
                      "arn:aws:cloudfront::",
                      !Ref "AWS::AccountId",
                      ":distribution/",
                      !Ref CloudFrontDistribution,
                    ],
                  ]
  
  # CloudFront Distribution for hosting the single page app website
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - greatsquat.com
        Origins:
          - DomainName: !GetAtt WebSiteBucket.RegionalDomainName
            Id: myS3Origin
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            S3OriginConfig:
              OriginAccessIdentity: ""
        Enabled: true
        DefaultRootObject: index.html
        HttpVersion: http2
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt CloudFrontIndexRewriteFunction.FunctionMetadata.FunctionARN
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          CachedMethods:
            - GET
            - HEAD
          TargetOriginId: myS3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          MinTTL: 0
          DefaultTTL: 3600
          MaxTTL: 86400
        PriceClass: PriceClass_200
        Restrictions:
          GeoRestriction:
            RestrictionType: whitelist
            Locations:
              - US
              - CA
              - GB
              - DE
        # ViewerCertificate:
        #   CloudFrontDefaultCertificate: true
        ViewerCertificate:
          AcmCertificateArn: !Ref ACMCertificate
          # "arn:aws:acm:us-east-1:433321780850:certificate/71526c6f-5440-4b41-a099-2bd4178946a9"
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${WebSiteBucket} OAC"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Function to rewrite index.html for single page app.
  # Not having this function causes the app to break when refreshing a page that is in a folder, but not named index.html
  # see https://aws.amazon.com/blogs/networking-and-content-delivery/implementing-default-directory-indexes-in-amazon-s3-backed-amazon-cloudfront-origins-using-cloudfront-functions/
  CloudFrontIndexRewriteFunction:
    Type: AWS::CloudFront::Function
    Properties:
      AutoPublish: true
      FunctionCode: |-
        function handler(event) {
          var request = event.request;
          var uri = request.uri;
          // Check whether the URI is missing a file name.
          if (uri.endsWith('/')) {
              request.uri += 'index.html';
          } 
          // Check whether the URI is missing a file extension.
          else if (!uri.includes('.')) {
              request.uri += '/index.html';
          }
          return request;
        }

      FunctionConfig: 
        Comment: "Rewrites index.html for single page app"
        Runtime: cloudfront-js-1.0
      Name: !Sub "${AWS::StackName}-redirectFunction"


  # HostedZone: 
  #   Type: "AWS::Route53::HostedZone"
  #   Properties: 
  #     HostedZoneConfig: 
  #       Comment: 'My hosted zone for example.com'
  #     Name: 'greatsquat.com'


  # Route53RecordSet:
  #   Type: AWS::Route53::RecordSetGroup
  #   Properties:
  #     HostedZoneName: greatsquat.com
  #     RecordSets:
  #     - Name: greatsquat.com
  #       Type: A
  #       AliasTarget:
  #         # HostedZoneId: !Ref HostedZone
  #         HostedZoneId: Z03886143SNIJLFXJHVX0
  #         DNSName: !GetAtt CloudFrontDistribution.DomainName

  ACMCertificate: 
    Type: "AWS::CertificateManager::Certificate"
    Properties: 
      DomainName: greatsquat.com
      DomainValidationOptions:
            - DomainName: greatsquat.com
              HostedZoneId: Z03886143SNIJLFXJHVX0
      ValidationMethod: DNS

Outputs:
  CloudFrontDistributionId:
    Description: CloudFront Distribution ID for hosting web front end
    Value: !Ref CloudFrontDistribution
  CloudFrontDistributionDomainName:
    Description: CloudFront Distribution Domain Name for accessing web front end
    Value: !GetAtt CloudFrontDistribution.DomainName
  WebS3BucketName:
    Description: S3 Bucket for hosting web frontend
    Value: !Ref WebSiteBucket

Globals:
  Function:
    Tracing: Active
  Api:
    TracingEnabled: true
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"